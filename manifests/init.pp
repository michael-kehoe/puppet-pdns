class pdns ($allow_axfr_ips='undef',
		$allow_recursion='undef',
		$allow_recursion_override='no',
		$cache_ttl='20',
		$chroot=false,
		$config='no',
		$config_dir='/etc/powerdns',
		$config_name=false,
		$control_console='no',
		$daemon='yes',
		$default_soa_name='a.misconfigured.powerdns.server',
		$disable_axfr='yes',
		$disable_tcp='no',
		$distributor_threads='3',
		$fancy_records='no',
		$guardian='yes',
		$launch='undef',
		$lazy_recursion='yes',
		$load_modules='undef',
		$local_address='0.0.0.0',
		$local_ipv6=false,
		$local_port='53',
		$local_dns_queries='no',
		$log_dns_details='undef',
		$log_failed_updates='undef',
		$logfile='/var/log/pdns.log',
		$logging_facility=false,
		$log_level='4',
		$master='yes',
		$max_cache_entries='1000000',
		$max_queue_length='5000',
		$max_tcp_connections='10',
		$module_dir='/usr/lib/powerdns',
		$negquery_cache_ttl='60',
		$out_of_zone_additional_processing='yes',
		$query_cache_ttl='20',
		$query_logging='no',
		$queue_limit='1500',
		$query_local_address=false,
		$receiver_threads='1',
		$recursive_cache_ttl='10',
		$recursor='127.0.0.1:54',
		$retrieval_threads='2',
		$setgid='pdns',
		$setuid='pdns',
		$slave='no',
		$slave_cycle_interval='60',
		$smtpredirector='a.misconfigured.powerdns.smtp.server',
		$soa_minimum_ttl='3600',
		$soa_refresh_default='10800',
		$soa_retry_default='3600',
		$soa_expire_default='604800',
		$soa_serial_offset='0',
		$socket_dir='/var/run',
		$strict_rfc_axfrs='no',
		$urlredirector='127.0.0.1',
		$use_logfile='yes',
		$webserver='no',
		$webserver_address='0.0.0.0',
		$webserver_password='',
		$webserver_port='8081',
		$webserver_print_arguments='yes',
		$wildcard_url='no',
		$version_string = 'powerdns',) {


	package { 'pdns-server':
		 ensure => installed,
	}
	
	file { "pdns.conf":
                       path   => "/etc/powerdns/pdns.conf",
                       owner  => root,
                       group  => root,
                       mode   => 600,
                       content => template("pdns/pdns.conf.erb"),
                       notify => Service['pdns'];
        }
	service { 'pdns':
		ensure => running,
                enable => true,
                hasstatus => true,
                hasrestart => true,	
	}
}
